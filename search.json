[{"path":[]},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"description","dir":"","previous_headings":"1. Support for typed functions","what":"Description","title":"interface v0.1.0 (in development)","text":"Allow defining functions typed arguments return values. require mechanism extending base R types.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"implementation-ideas","dir":"","previous_headings":"1. Support for typed functions","what":"Implementation Ideas","title":"interface v0.1.0 (in development)","text":"","code":"function2 <- interface(\"function\",     arg1 = \"numeric\",     arg2 = \"character\",     return = \"numeric\" )  # Implement the function f2 <- implement(function2, function(arg1, arg2) {     return(arg1 + nchar(arg2)) })"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"description-1","dir":"","previous_headings":"2. Support for generics with runtime enforcement","what":"Description","title":"interface v0.1.0 (in development)","text":"Allow defining generic interface, allow one enforce types across data.frame columns example.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"implementation-ideas-1","dir":"","previous_headings":"2. Support for generics with runtime enforcement","what":"Implementation Ideas","title":"interface v0.1.0 (in development)","text":"","code":"# Define a interface with n character columns and m numeric columns Df <- interface(\"data.frame\",     name = \"character\",     height = \"numeric\",     age = \"numeric\" )  # Implement the interface df1 <- implement(Df,     data.frame(         name = c(\"John\", \"Jane\"),         height = c(5.8, 6.0),         age = c(30, 25)     ) )  # This should raise an error df1$age <- c(\"30\", \"25\")"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"description-2","dir":"","previous_headings":"3. Allow for generics with either or types","what":"Description","title":"interface v0.1.0 (in development)","text":"Much way TypeScript allows Union Types, can allow Union Types interface package.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"implementation-ideas-2","dir":"","previous_headings":"3. Allow for generics with either or types","what":"Implementation Ideas","title":"interface v0.1.0 (in development)","text":"","code":"CharNumList <- interface(\"list\",     value = c(\"character\", \"numeric\") )  # Implement the interface list1 <- implement(CharNumList, list(\"John\", 30))  Df <- interface(\"data.frame\",     name = \"character\",     height = c(\"numeric\", \"character\"),     age = \"numeric\" )"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"description-3","dir":"","previous_headings":"4. Implement Atomic Types","what":"Description","title":"interface v0.1.0 (in development)","text":"Create new way define atomic types, similar TypeScript’s type aliases. allow users define types single values instead lists .e. difference type interface TypeScript. way user even flexibility check length atomic type.","code":"type Cohort = \"alpha\" | \"beta\" | \"gamma\";  interface Person {     name: string;     age: number;     cohort: Cohort; }"},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"implementation-ideas-3","dir":"","previous_headings":"4. Implement Atomic Types","what":"Implementation Ideas","title":"interface v0.1.0 (in development)","text":"Create new function, type(), defines atomic types; instead returning list return vectors (since atomic types vectors R). Modify check_type() function handle new atomic types. Update implement() function return atomic values appropriate.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"example-usage","dir":"","previous_headings":"4. Implement Atomic Types","what":"Example Usage","title":"interface v0.1.0 (in development)","text":"","code":"Cohort <- type(\"Cohort\", c(\"alpha\", \"beta\", \"gamma\"))  # by default the validate function only checks for membership cohort1 <- implement(Cohort, \"alpha\")  # custom function for type checking Age <- type(\"Age\", function(x) {     return(is.numeric(x) && x >= 0 && x <= 120 && length(x) == 1) })  # Use the atomic type john_age <- implement(Age, 30) print(john_age) # Should print a vector of length 1  # This should raise an error try(implement(Age, 150))"},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"integration-with-existing-codebase","dir":"","previous_headings":"4. Implement Atomic Types","what":"Integration with Existing Codebase","title":"interface v0.1.0 (in development)","text":"Add new file R/type.R contain type() function related helpers. Modify R/implement.R handle atomic types differently interfaces. Update R/helpers.R include type checking atomic types. Add new print functions R/print.R handle atomic types.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"description-4","dir":"","previous_headings":"5. Extend Interfaces and Existing R Types","what":"Description","title":"interface v0.1.0 (in development)","text":"Allow interfaces extend interfaces existing R types, similar inheritance object-oriented programming.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"implementation-ideas-4","dir":"","previous_headings":"5. Extend Interfaces and Existing R Types","what":"Implementation Ideas","title":"interface v0.1.0 (in development)","text":"Modify interface() function accept extends parameter. Update check_interface() function check properties extended interfaces types. Implement mechanism resolve property conflicts case multiple extensions.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"example-usage-1","dir":"","previous_headings":"5. Extend Interfaces and Existing R Types","what":"Example Usage","title":"interface v0.1.0 (in development)","text":"","code":"# Extend an existing interface Person <- interface(\"Person\",     name = \"character\",     age = \"numeric\" )  Employee <- interface(\"Employee\",     extends = Person,     job_title = \"character\",     salary = \"numeric\" )  john <- implement(Employee,     name = \"John Doe\",     age = 30,     job_title = \"Developer\",     salary = 75000 )  # TODO: this needs more work # Extend an existing R type EnhancedDataFrame <- interface(\"EnhancedDataFrame\",     extends = \"data.frame\",     metadata = \"list\" )  my_df <- implement(EnhancedDataFrame,     data.frame(x = 1:3, y = c(\"a\", \"b\", \"c\")),     metadata = list(created_at = Sys.time()) )"},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"integration-with-existing-codebase-1","dir":"","previous_headings":"5. Extend Interfaces and Existing R Types","what":"Integration with Existing Codebase","title":"interface v0.1.0 (in development)","text":"Modify R/interface.R handle extends parameter. Update R/helpers.R include extended property checking check_interface(). Add new test cases tests/testthat/test-interface.R extension functionality.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"description-5","dir":"","previous_headings":"6. Add Method Signatures to Interfaces","what":"Description","title":"interface v0.1.0 (in development)","text":"Allow interfaces specify method signatures, just properties.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"implementation-ideas-5","dir":"","previous_headings":"6. Add Method Signatures to Interfaces","what":"Implementation Ideas","title":"interface v0.1.0 (in development)","text":"Extend interface() function accept method signatures. Implement mechanism check object implements required methods.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"example-usage-2","dir":"","previous_headings":"6. Add Method Signatures to Interfaces","what":"Example Usage","title":"interface v0.1.0 (in development)","text":"","code":"Drawable <- interface(\"Drawable\",     methods = list(         draw = function() NULL     ) )  Circle <- interface(\"Circle\",     extends = Drawable,     radius = \"numeric\",     methods = list(         area = function() NULL     ) )  my_circle <- implement(Circle,     radius = 5,     draw = function() {         return(cat(\"Drawing a circle\\n\"))     },     area = function() {         return(pi * self$radius ^ 2)     } )  my_circle$draw() print(my_circle$area())"},{"path":"https://dereckmezquita.github.io/dmplot/TODO.html","id":"integration-with-existing-codebase-2","dir":"","previous_headings":"6. Add Method Signatures to Interfaces","what":"Integration with Existing Codebase","title":"interface v0.1.0 (in development)","text":"Modify R/interface.R handle method signatures. Update R/implement.R check implement methods. Add new test cases tests/testthat/test-interface.R method functionality.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to interface","text":"interface package provides system defining implementing interfaces R, optional runtime type checking. approach brings benefits statically-typed languages R, allowing structured safer code.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"why-use-interfaces","dir":"Articles","previous_headings":"","what":"Why Use Interfaces?","title":"Introduction to interface","text":"Interfaces R can beneficial several reasons: Code Structure: provide clear contract properties methods object . Type Safety: allow runtime type checking, catching errors early. Documentation: serve self-documenting code, clearly stating expected structure objects. Flexibility: allow implementation multiple interfaces, promoting code reuse.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"defining-an-interface","dir":"Articles","previous_headings":"Basic Usage","what":"Defining an Interface","title":"Introduction to interface","text":"define interface, use interface() function: creates interface named “Person” three properties: name (character) age (numeric) email (character)","code":"Person <- interface(\"Person\",     name = \"character\",     age = \"numeric\",     email = \"character\" )"},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"implementing-an-interface","dir":"Articles","previous_headings":"Basic Usage","what":"Implementing an Interface","title":"Introduction to interface","text":"create object implements interface, use implement() function:","code":"john <- implement(Person,     name = \"John Doe\",     age = 30,     email = \"john@example.com\" )"},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"accessing-properties","dir":"Articles","previous_headings":"Basic Usage","what":"Accessing Properties","title":"Introduction to interface","text":"can access properties implemented object just like regular list:","code":"print(john$name) #> [1] \"John Doe\" print(john$age) #> [1] 30"},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"type-checking","dir":"Articles","previous_headings":"Basic Usage","what":"Type Checking","title":"Introduction to interface","text":"default, type checking occurs access properties: error raised ’re trying assign character value numeric property.","code":"try(john$age <- \"thirty\") #> Error in `$<-.validated_list`(`*tmp*`, age, value = \"thirty\") :  #>   Property 'age' does not match the expected type specification"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"disabling-type-checking","dir":"Articles","previous_headings":"Advanced Features","what":"Disabling Type Checking","title":"Introduction to interface","text":"can disable type checking reduce overhead:","code":"Dog <- interface(\"Dog\",     name = \"character\",     age = \"numeric\",     breed = \"character\",     validate_on_access = FALSE )  fido <- implement(Dog,     name = \"Fido\",     age = 5,     breed = \"Golden Retriever\" )  try(fido$age <- \"five\") # No error, type checking is disabled #> Error in `$<-.validated_list`(`*tmp*`, age, value = \"five\") :  #>   Property 'age' does not match the expected type specification print(fido$age) #> [1] 5"},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"nested-interfaces","dir":"Articles","previous_headings":"Advanced Features","what":"Nested Interfaces","title":"Introduction to interface","text":"can use interfaces property types interfaces:","code":"Address <- interface(\"Address\",     street = \"character\",     city = \"character\",     state = \"character\",     zip = \"numeric\" )  Employee <- interface(\"Employee\",     name = \"character\",     age = \"numeric\",     email = \"character\",     address = Address )  jane <- implement(Employee,     name = \"Jane Doe\",     age = 28,     email = \"jane@company.com\",     address = implement(Address,         street = \"123 Main St\",         city = \"Anytown\",         state = \"CA\",         zip = 12345     ) )  print(jane$address$city) #> [1] \"Anytown\""},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"custom-validation-functions","dir":"Articles","previous_headings":"Advanced Features","what":"Custom Validation Functions","title":"Introduction to interface","text":"can use custom functions complex validation:","code":"positive_number <- function(x) is.numeric(x) && x > 0  Account <- interface(\"Account\",     id = \"character\",     balance = positive_number )  my_account <- implement(Account,     id = \"ACC123\",     balance = 1000 )  print(my_account$balance) #> [1] 1000 # This will raise an error tryCatch(     implement(Account, id = \"ACC124\", balance = -500),     error = function(e) print(e$message) ) #> [1] \"Property 'balance' does not match the expected type specification\""},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"using-with-various-r-types","dir":"Articles","previous_headings":"Advanced Features","what":"Using with Various R Types","title":"Introduction to interface","text":"interface package supports wide range R types: example demonstrates interface system now supports various R types, including data.frames, data.tables, factors, dates, times.","code":"ComplexPerson <- interface(\"ComplexPerson\",     name = \"character\",     age = \"numeric\",     hobbies = \"list\",     scores = \"data.frame\",     factors = \"factor\",     dates = \"Date\",     times = \"POSIXct\",     metadata = \"ANY\" # ANY allows any type )  person <- implement(ComplexPerson,     name = \"Alice Johnson\",     age = 35,     hobbies = list(\"painting\", \"cycling\"),     scores = data.frame(subject = c(\"Art\", \"Physics\"), score = c(95, 88)),     factors = factor(c(\"A\", \"B\", \"A\", \"C\")),     dates = as.Date(c(\"2023-01-01\", \"2023-06-30\")),     times = as.POSIXct(c(\"2023-01-01 09:00:00\", \"2023-01-01 17:00:00\")),     metadata = list(last_updated = Sys.time()) )  print(person$hobbies) #> [[1]] #> [1] \"painting\" #>  #> [[2]] #> [1] \"cycling\" print(person$scores) #>   subject score #> 1     Art    95 #> 2 Physics    88 print(person$factors) #> [1] A B A C #> Levels: A B C print(person$dates) #> [1] \"2023-01-01\" \"2023-06-30\" print(person$times) #> [1] \"2023-01-01 09:00:00 UTC\" \"2023-01-01 17:00:00 UTC\""},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Introduction to interface","text":"Specific: Define interfaces specifically possible. helps catch errors early. Use Custom Validators: complex rules, create custom validator functions. Compose Interfaces: Use nested interfaces create complex structures. Document Interfaces: Good documentation helps developers understand use interfaces.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/introduction.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to interface","text":"interface package provides powerful way bring interface-like structures R programming. using interfaces, can create robust, self-documenting code ’s easier maintain extend. Remember, interfaces provide many benefits, also add layer complexity code. Use judiciously benefits outweigh added complexity. vignette provides comprehensive introduction interface package. covers: motivation behind using interfaces R Basic usage package Advanced features like disabling type checking, nested interfaces, custom validation functions Examples using interfaces various R types Best practices using package","code":""},{"path":"https://dereckmezquita.github.io/dmplot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dereck Mezquita. Author, maintainer.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mezquita D (2024). interface: Interfaces data validation typing R. R package version 0.0.2.","code":"@Manual{,   title = {interface: Interfaces for data validation and typing in R},   author = {Dereck Mezquita},   year = {2024},   note = {R package version 0.0.2}, }"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Interfaces for data validation and typing in R","text":"interface package brings power interfaces runtime type checking R, offering robust solution data structure validation enhancing code reliability. dynamic world R programming, data structures can fluid, interface provides safety net, ensuring data conforms expected structures types.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"why-interface","dir":"","previous_headings":"Overview","what":"Why interface?","title":"Interfaces for data validation and typing in R","text":"Data Integrity: Ensure data structures consistent valid throughout analysis pipeline. Early Error Detection: Catch type mismatches structural issues runtime, preventing silent errors compromise results. Self-Documenting Code: Interfaces serve clear contracts, making code readable self-explanatory. Flexible Validation: simple type checks complex custom validations, interface adapts needs. Performance Control: Toggle validation /needed, balancing safety performance.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interfaces for data validation and typing in R","text":"can install development version interface GitHub :","code":"# install.packages(\"devtools\") remotes::install_github(\"dereckmezquita/interface\")"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Interfaces for data validation and typing in R","text":"","code":"box::use(interface[interface, implement])  # Define an interface for a data structure PersonData <- interface(\"PersonData\",     name = \"character\",     age = \"numeric\",     email = \"character\",     scores = \"data.frame\" )  # Implement the interface john_data <- implement(PersonData,     name = \"John Doe\",     age = 30,     email = \"john@example.com\",     scores = data.frame(subject = c(\"Math\", \"Science\"), score = c(95, 88)) )  # Access data safely print(john_data$name) #> [1] \"John Doe\" print(john_data$scores) #>   subject score #> 1    Math    95 #> 2 Science    88 # This will raise an error, preventing silent issues try(john_data$age <- \"thirty\") #> Error in `$<-.validated_list`(`*tmp*`, age, value = \"thirty\") :  #>   Property 'age' does not match the expected type specification"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"basic-interface-definition","dir":"","previous_headings":"Detailed Usage","what":"Basic Interface Definition","title":"Interfaces for data validation and typing in R","text":"Interfaces R provide clear contract data structures:","code":"# Define a basic interface SimpleDataset <- interface(\"SimpleDataset\",     id = \"integer\",     value = \"numeric\",     category = \"factor\" )  # Implement the interface valid_data <- implement(SimpleDataset,     id = 1L,     value = 10.5,     category = factor(\"A\", levels = c(\"A\", \"B\", \"C\")) )  print(valid_data) #> Object implementing SimpleDataset interface: #>   id: 1  #>   value: 10.5  #>   category: 1  #> Validation on access: Enabled"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"custom-validation-functions","dir":"","previous_headings":"Detailed Usage","what":"Custom Validation Functions","title":"Interfaces for data validation and typing in R","text":"complex validations, use custom functions:","code":"# Custom validation function is_valid_email <- function(x) {     grepl(\"^[^@\\\\s]+@[^@\\\\s]+\\\\.[^@\\\\s]+$\", x) }  # Interface with custom validation UserProfile <- interface(\"UserProfile\",     username = \"character\",     email = is_valid_email,     age = function(x) is.numeric(x) && x >= 18 )  # Implement with valid data valid_user <- implement(UserProfile,     username = \"john_doe\",     email = \"john@example.com\",     age = 25 )  print(valid_user) #> Object implementing UserProfile interface: #>   username: john_doe  #>   email: john@example.com  #>   age: 25  #> Validation on access: Enabled # This will raise an error due to invalid email try(implement(UserProfile,     username = \"jane_doe\",     email = \"not_an_email\",     age = 30 )) #> Error in validate_object(obj, interface) :  #>   Property 'email' does not match the expected type specification"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"nested-interfaces","dir":"","previous_headings":"Detailed Usage","what":"Nested Interfaces","title":"Interfaces for data validation and typing in R","text":"Compose complex data structures nested interfaces:","code":"Address <- interface(\"Address\",     street = \"character\",     city = \"character\",     postal_code = \"character\" )  Employee <- interface(\"Employee\",     name = \"character\",     position = \"character\",     address = Address )  employee_data <- implement(Employee,     name = \"Alice Johnson\",     position = \"Data Scientist\",     address = implement(Address,         street = \"123 Tech Street\",         city = \"Data City\",         postal_code = \"12345\"     ) )  print(employee_data$address$city) #> [1] \"Data City\""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"flexible-validation-control","dir":"","previous_headings":"Detailed Usage","what":"Flexible Validation Control","title":"Interfaces for data validation and typing in R","text":"Toggle validation performance optimisation:","code":"LargeDataset <- interface(\"LargeDataset\",     data = \"data.frame\",     metadata = \"list\",     validate_on_access = FALSE # Disable validation for performance )  big_data <- implement(LargeDataset,     data = data.frame(x = 1:1000000, y = runif(1000000)),     metadata = list(source = \"simulation\", date = Sys.Date()) )  # No validation on access for better performance big_data$data[1, \"x\"] <- \"should be numeric but no error raised\""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"data-pipeline-integrity","dir":"","previous_headings":"Benefits in Real-world Scenarios","what":"Data Pipeline Integrity","title":"Interfaces for data validation and typing in R","text":"Ensure consistent data structures throughout analysis pipeline: example demonstrates interface can ensure data integrity throughout multi-stage analysis pipeline, catching structural type inconsistencies early process.","code":"# Define interfaces for each stage of your pipeline RawData <- interface(\"RawData\",     timestamp = \"POSIXct\",     measurements = \"list\" )  ProcessedData <- interface(\"ProcessedData\",     timestamp = \"POSIXct\",     average = \"numeric\",     stddev = \"numeric\" )  AnalysisResult <- interface(\"AnalysisResult\",     data = ProcessedData,     model_fit = \"list\",     r_squared = \"numeric\" )  # Your pipeline functions process_data <- function(raw_data) {     # Processing logic here     implement(ProcessedData,         timestamp = raw_data$timestamp,         average = mean(unlist(raw_data$measurements)),         stddev = sd(unlist(raw_data$measurements))     ) }  analyze_data <- function(processed_data) {     # Analysis logic here     implement(AnalysisResult,         data = processed_data,         model_fit = list(coefficients = c(intercept = 0.5, slope = 1.2)),         r_squared = 0.85     ) }  # Run the pipeline raw_data <- implement(RawData,     timestamp = Sys.time(),     measurements = list(10, 15, 20, 18, 22) )  processed <- process_data(raw_data) result <- analyze_data(processed)  print(result) #> Object implementing AnalysisResult interface: #>   data: <validated_list> #>   model_fit: <list> #>   r_squared: 0.85  #> Validation on access: Enabled"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"conclusion","dir":"","previous_headings":"","what":"Conclusion","title":"Interfaces for data validation and typing in R","text":"interface package brings new level structure safety R programming. providing clear contracts data structures runtime type checking, helps prevent common errors, improves code readability, ensures data integrity throughout projects. Whether ’re working small scripts large-scale data analysis pipelines, interface offers flexibility robustness enhance R code. Start using interface today write safer, reliable R code!","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Interfaces for data validation and typing in R","text":"Contributions interface welcome! Please refer Contribution Guidelines information.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Interfaces for data validation and typing in R","text":"project licensed MIT License - see LICENSE.md file details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cash-.validated_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom accessor for validated_list objects — $.validated_list","title":"Custom accessor for validated_list objects — $.validated_list","text":"Custom accessor validated_list objects","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cash-.validated_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom accessor for validated_list objects — $.validated_list","text":"","code":"# S3 method for validated_list $(x, i)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/cash-.validated_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom accessor for validated_list objects — $.validated_list","text":"x validated_list object name property access","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cash-.validated_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom accessor for validated_list objects — $.validated_list","text":"value property","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cash-set-.validated_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom assignment for validated_list objects — $<-.validated_list","title":"Custom assignment for validated_list objects — $<-.validated_list","text":"Custom assignment validated_list objects","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cash-set-.validated_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom assignment for validated_list objects — $<-.validated_list","text":"","code":"# S3 method for validated_list $(x, i) <- value"},{"path":"https://dereckmezquita.github.io/dmplot/reference/cash-set-.validated_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom assignment for validated_list objects — $<-.validated_list","text":"x validated_list object name property assign value value assign","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cash-set-.validated_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom assignment for validated_list objects — $<-.validated_list","text":"updated validated_list object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/check_interface.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a value implements an interface — check_interface","title":"Check if a value implements an interface — check_interface","text":"Check value implements interface","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/check_interface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a value implements an interface — check_interface","text":"","code":"check_interface(value, interface)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/check_interface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a value implements an interface — check_interface","text":"value value check interface interface check ","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/check_interface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a value implements an interface — check_interface","text":"Logical indicating whether value implements interface","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/check_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a value matches a type specification — check_type","title":"Check if a value matches a type specification — check_type","text":"Check value matches type specification","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/check_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a value matches a type specification — check_type","text":"","code":"check_type(value, type_spec)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/check_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a value matches a type specification — check_type","text":"value value check type_spec type specification check ","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/check_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a value matches a type specification — check_type","text":"Logical indicating whether value matches type specification","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/implement.html","id":null,"dir":"Reference","previous_headings":"","what":"Implement an Interface — implement","title":"Implement an Interface — implement","text":"Implement Interface","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/implement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implement an Interface — implement","text":"","code":"implement(interface, ..., validate_on_access = TRUE, allow_extra = FALSE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/implement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implement an Interface — implement","text":"interface Interface object ... Properties implement interface validate_on_access Logical, whether validate access allow_extra Logical, whether allow extra properties defined interface","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/implement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implement an Interface — implement","text":"object implementing interface","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/interface.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to create an Interface object — Interface","title":"Internal function to create an Interface object — Interface","text":"Internal function create Interface object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/interface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to create an Interface object — Interface","text":"","code":"Interface(interface_name, properties, validate_on_access = TRUE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/interface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to create an Interface object — Interface","text":"interface_name character string naming interface properties list property definitions validate_on_access Logical, whether validate access default","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/interface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to create an Interface object — Interface","text":"Interface object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/print.Interface.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for Interface objects — print.Interface","title":"Print method for Interface objects — print.Interface","text":"Print method Interface objects","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/print.Interface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for Interface objects — print.Interface","text":"","code":"# S3 method for Interface print(x, ...)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/print.Interface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for Interface objects — print.Interface","text":"x Interface object print ... Additional arguments passed print","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/print.Interface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for Interface objects — print.Interface","text":"Invisibly returns object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/print.InterfaceImplementation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for InterfaceImplementation objects — print.InterfaceImplementation","title":"Print method for InterfaceImplementation objects — print.InterfaceImplementation","text":"Print method InterfaceImplementation objects","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/print.InterfaceImplementation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for InterfaceImplementation objects — print.InterfaceImplementation","text":"","code":"# S3 method for InterfaceImplementation print(x, ...)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/print.InterfaceImplementation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for InterfaceImplementation objects — print.InterfaceImplementation","text":"x InterfaceImplementation object print ... Additional arguments passed print","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/print.InterfaceImplementation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for InterfaceImplementation objects — print.InterfaceImplementation","text":"Invisibly returns object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/summary.Interface.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for Interface objects — summary.Interface","title":"Summary method for Interface objects — summary.Interface","text":"Summary method Interface objects","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/summary.Interface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for Interface objects — summary.Interface","text":"","code":"# S3 method for Interface summary(object, ...)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/summary.Interface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for Interface objects — summary.Interface","text":"object Interface object summarize ... Additional arguments passed summary","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/summary.Interface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for Interface objects — summary.Interface","text":"Invisibly returns object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/validate_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an object against an interface — validate_object","title":"Validate an object against an interface — validate_object","text":"Validate object interface","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/validate_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an object against an interface — validate_object","text":"","code":"validate_object(obj, interface)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/validate_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an object against an interface — validate_object","text":"obj object validate interface interface validate ","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/validate_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an object against an interface — validate_object","text":"TRUE object valid, otherwise throws error","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"interface v0.1.0 (in development)","text":"N/","code":""},{"path":"https://dereckmezquita.github.io/dmplot/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"interface v0.1.0 (in development)","text":"Implemented core functionality defining implementing interfaces. Added support optional runtime type checking. Included support nested interfaces custom validation functions. Created comprehensive documentation vignettes.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/news/index.html","id":"notes-0-1-0","dir":"Changelog","previous_headings":"","what":"NOTES","title":"interface v0.1.0 (in development)","text":"first release interface package.","code":""}]
